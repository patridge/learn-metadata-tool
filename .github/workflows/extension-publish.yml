name: "Publish browser extension"

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: ["main", "dev"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # NOTES:
      # * jq --raw-output eliminates quotes from result value
      # * Excluding /.git and /media files from resulting archive
      - name: "Zip extension contents"
        run: |
          version=$(jq --raw-output '.version' manifest.json)
          zipPath="learn-metadata-tool-$version.zip"
          echo $zipPath
          zip -r $zipPath * -x ".git/*" "media/*"
          echo "dev?: ${{ github.ref == 'refs/heads/dev' }}"
          echo "{EXTENSION_ZIP_PATH=$zipPath}" >> $GITHUB_ENV
          echo "{EXTENSION_VERSION=$version}" >> $GITHUB_ENV

      # NOTES:
      # * Sets to prerelease vs. production release based on branch being `dev`.
      - name: "Create GitHub Release"
        uses: ncipollo/release-action@v1.10.0
        with:
          prerelease: ${{ github.ref == 'refs/heads/dev' }}
          draft: true
          #tag: "v${{ env.EXTENSION_VERSION }}"
          commit: $GITHUB_REF
          name: "v${{ env.EXTENSION_VERSION }}"
          bodyFile: "README.md" # TODO: Get just latest release notes from README.md
          artifacts: ${{ env.EXTENSION_ZIP_PATH }}

      # NOTES:
      # * Only submits a release when push is to `main` branch
      # - name: "Submit Chrome Web Store release"
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   run: "echo \"TODO: Make a Chrome release\""

      # FUTURE?: Confirming there are release notes added for the current version being released.
